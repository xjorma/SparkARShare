#import <Utils.sca>

vec3 Plasma_float(in vec2 uv, in float time, in vec4 vertexColor)
{
  const float tile = 32.0;
  //uv = floor(uv * tile) / tile;
  time += vertexColor.y;
  float k = .1 + cos(uv.y + sin(.148 - time)) + 2.4 * time;
  float w = .9 + sin(uv.x + cos(.628 + time)) - 0.7 * time;
  float d = length(uv);
  float s = 7. * cos(d+w) * sin(k+w);

  vec3 col[9] = {   vec3(0.5, 0.0, 0.0), // Dark red
                    vec3(1.0, 0.0, 0.0), // Red
                    vec3(1.0, 1.0, 0.0), // Yellow
                    vec3(0.0, 0.0, 0.5), // Dark blue
                    vec3(0.0, 0.0, 1.0), // Blue
                    vec3(1.0, 1.0, 1.0), // White
                    vec3(0.2, 0.025, 0.125),// Dark purple
                    vec3(0.4, 0.05,  0.25), // Purple
                    vec3(0.0, 0.6,   0.24)  // Green
                  };

  float f = cos(s);
  int b = int(round(vertexColor.x * 2.0) * 3.0);
  vec3 color;
  if(f < 0.0)
      color = mix(col[b + 0], col[b + 1], 1.0 + f);
  else
      color = mix(col[b + 1], col[b + 2], f);
  return color;
}


// @param[default=#000000FF] color Test Zarb
// @return patch output
vec4 main(vec4 color,
          function<vec4(vec2)> backgroundTexture)
{
  vec4 Position = std::getModelViewProjectionMatrix() * std::getVertexPosition();
  vec2 uv = fragment(std::getVertexTexCoord());
  vec2 fragCoord = fragment(Position.xy ) / Position.w;
  fragCoord = fragCoord * 0.5 + 0.5;
  fragCoord.y = 1.0 - fragCoord.y;

  vec3 bk = backgroundTexture(fragCoord).rgb;

  float alpha = vlahosGetAlpha(bk, 8.0, 1.2);
  bk = vlahosDespill(bk, 0.5);

  vec3 col = Plasma_float(fragment(std::getVertexTexCoord()), std::getTime() / 2.0, std::getVertexColor().valueOr(vec4(1,0,0,1)));

  return vec4(col, 1);

  //return vec4(mix(vec3(1, 0, 0), bk, alpha), 1);
}
